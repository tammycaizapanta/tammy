# -*- coding: utf-8 -*-
"""Generador de proposiciones y su negación .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aeBomp-Pm8S_nGxT9jwVwVpownMMy0lP
"""

# Proyecto 5: Generador de proposiciones y su negación
# Objetivo: Crear proposiciones aleatorias y construir su negación usando las leyes de De Morgan.
# Herramientas utilizadas: operadores lógicos, condicionales, funciones, entrada/salida de datos, ipywidgets para interfaz en Colab

# ---------------------- IMPORTAR LIBRERÍAS ----------------------
import random  # Para generar letras y operadores lógicos aleatorios
import ipywidgets as widgets  # Para crear botones, textos y la interfaz gráfica en Colab
from IPython.display import display, HTML  # Para mostrar elementos visuales y centrar el contenido

# ---------------------- TÍTULO DEL PROGRAMA ----------------------
# Creamos un encabezado con estilo HTML que se verá bonito y centrado
titulo = widgets.HTML(
    value="""
    <h2 style="color: #d0d0ff; text-align:center;"> Generador de Proposiciones y su Negación </h2>
    """,
    layout=widgets.Layout(width='100%')
)

# ---------------------- ÁREA DE ENTRADA ----------------------
# Aquí el usuario puede escribir su propia proposición lógica
entrada = widgets.Text(
    value='',
    placeholder='Escribe o genera una proposición',  # Texto guía
    description='Proposición:',  # Etiqueta del campo
    layout=widgets.Layout(width='100%')  # Que ocupe todo el ancho
)

# ---------------------- ÁREA DE RESULTADO ----------------------
# Espacio donde se muestra la negación de la proposición
resultado = widgets.Textarea(
    value='',
    placeholder='Aquí aparecerá la negación...',  # Texto guía
    description='Resultado:',  # Etiqueta del área de resultado
    layout=widgets.Layout(width='100%', height='120px')  # Ancho total y altura de 120px
)

# ---------------------- FUNCIÓN PARA INSERTAR OPERADORES ----------------------
# Esta función sirve para agregar símbolos lógicos como ∧ o ¬ en el texto de entrada
def insertar_operador(simbolo):
    entrada.value += simbolo  # Agrega el símbolo al final del texto actual

# ---------------------- GENERAR PROPOSICIÓN ALEATORIA ----------------------
# Esta función crea una proposición lógica aleatoria como (p ∧ q)
def generar_proposicion(_=None):
    letras = ['p', 'q', 'r']  # Letras posibles para las proposiciones
    operadores = ['∧', '∨', '→']  # Operadores lógicos posibles

    a = random.choice(letras)  # Elegimos la primera letra
    b = random.choice(letras)  # Elegimos la segunda letra

    while b == a:  # Aseguramos que no sean iguales
        b = random.choice(letras)

    operador = random.choice(operadores)  # Elegimos un operador aleatorio
    proposicion = f"({a} {operador} {b})"  # Creamos la expresión tipo (p ∧ q)

    entrada.value = proposicion  # La mostramos en el campo de entrada
    resultado.value = f"Proposición generada:\n{proposicion}"  # Y la mostramos como mensaje

# ---------------------- FUNCIÓN PARA NEGAR LA PROPOSICIÓN ----------------------
# Esta función aplica las leyes de De Morgan para negar una proposición
def negar_proposicion(_=None):
    expr = entrada.value.strip()  # Tomamos el texto sin espacios al inicio o final

    if not expr:  # Si está vacío, mostramos un mensaje
        resultado.value = "Primero escribe o genera una proposición."
        return

    # Dependiendo del operador, aplicamos la ley de De Morgan correspondiente
    if "∧" in expr:
        partes = expr.strip("()").split("∧")
        negada = f"(¬{partes[0].strip()} ∨ ¬{partes[1].strip()})"
    elif "∨" in expr:
        partes = expr.strip("()").split("∨")
        negada = f"(¬{partes[0].strip()} ∧ ¬{partes[1].strip()})"
    elif "→" in expr:
        partes = expr.strip("()").split("→")
        negada = f"({partes[0].strip()} ∧ ¬{partes[1].strip()})"
    else:  # Si no tiene operadores, solo le agregamos el símbolo de negación
        negada = f"¬{expr}"

    # Mostramos la proposición original y su negación
    resultado.value = f"Proposición:\n{expr}\n\nNegación:\n{negada}"

# ---------------------- BOTONES DE OPERADORES LÓGICOS ----------------------
# Creamos una lista de botones con los operadores lógicos
operadores = [("¬", "¬"), ("∧", " ∧ "), ("∨", " ∨ "), ("→", " → "), ("(", "("), (")", ")")]

# Lista para guardar los botones
botones_operadores = []
for texto, simbolo in operadores:
    boton = widgets.Button(
        description=texto,  # Texto que aparece en el botón
        button_style='info',  # Estilo azul claro
        layout=widgets.Layout(width='auto')  # Tamaño automático
    )
    boton.on_click(lambda b, s=simbolo: insertar_operador(s))  # Acción del botón
    botones_operadores.append(boton)  # Lo agregamos a la lista

# Mostramos todos los botones alineados horizontalmente
fila_operadores = widgets.HBox(botones_operadores, layout=widgets.Layout(justify_content='center'))

# ---------------------- BOTÓN BORRAR ----------------------
# Este botón borra todo lo escrito en el campo de entrada
btn_borrar = widgets.Button(
    description="Borrar",  # Texto del botón
    button_style='danger',  # Rojo
    layout=widgets.Layout(width='auto')
)
btn_borrar.on_click(lambda b: setattr(entrada, 'value', ''))  # Acción de borrar

# ---------------------- BOTONES DE ACCIÓN ----------------------
# Botón que genera una proposición aleatoria
btn_generar = widgets.Button(
    description="Generar proposición aleatoria",
    button_style='success',  # Verde
    layout=widgets.Layout(width='auto')
)
btn_generar.on_click(generar_proposicion)  # Acción del botón

# Botón que aplica la negación usando De Morgan
btn_negar = widgets.Button(
    description="Aplicar negación (De Morgan)",
    button_style='primary',  # Azul oscuro
    layout=widgets.Layout(width='auto')
)
btn_negar.on_click(negar_proposicion)  # Acción del botón

# ---------------------- LEYES DE DE MORGAN ----------------------
# Mostramos las leyes de De Morgan como referencia en pantalla
leyes = widgets.HTML(
    value="""
    <pre style="font-size: 14px; color: #ffcccc;">
<b>Leyes de De Morgan:</b>
¬(p ∧ q) ≡ ¬p ∨ ¬q
¬(p ∨ q) ≡ ¬p ∧ ¬q
¬(p → q) ≡ p ∧ ¬q
    </pre>
    """,
    layout=widgets.Layout(width='100%')
)

# ---------------------- ORGANIZAR LA INTERFAZ ----------------------
# Agrupamos todos los elementos para que se vean bien organizados
ui = widgets.VBox([
    titulo,           # Título de la app
    leyes,            # Leyes de De Morgan
    entrada,          # Campo para escribir la proposición
    fila_operadores,  # Botones de operadores lógicos
    btn_borrar,       # Botón para borrar el texto
    btn_generar,      # Botón para generar proposición aleatoria
    btn_negar,        # Botón para aplicar la negación
    resultado         # Área donde se muestra el resultado final
], layout=widgets.Layout(align_items='center', width='100%'))

# ---------------------- MOSTRAR TODO EN COLAB ----------------------
# Mostramos toda la interfaz en pantalla centrada usando HTML
display(HTML("<div style='display:flex; justify-content:center;'>"))
display(ui)  # Mostramos la interfaz
display(HTML("</div>"))  # Cerramos el div centrado